import { TSESLint } from "@typescript-eslint/utils";
import "@typescript-eslint/utils/eslint-utils";
import * as _typescript_eslint_utils_ts_eslint214 from "@typescript-eslint/utils/ts-eslint";
import * as eslint215 from "eslint";
import { Linter } from "eslint";

//#region src/util.d.ts
interface PluginDocumentation {
  description: string;
  recommended?: boolean;
  requiresTypeChecking: boolean;
}
//#endregion
//#region src/plugin.d.ts
declare const plugin: {
  meta: {
    name: string;
    version: string;
  };
  rules: {
    "lua-truthiness": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "misleading-lua-tuple-checks": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-any": TSESLint.RuleModule<"any-violation" | "suggest-unknown", [{
      fixToUnknown: boolean;
    }], PluginDocumentation, TSESLint.RuleListener>;
    "no-array-pairs": TSESLint.RuleModule<"array-ipairs-violation" | "array-pairs-violation", [], PluginDocumentation, TSESLint.RuleListener>;
    "no-enum-merging": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-export-assignment-let": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-for-in": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-function-expression-name": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-get-set": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-implicit-self": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-invalid-identifier": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-namespace-merging": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-null": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-object-math": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-post-fix-new": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-preceding-spread-element": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-private-identifier": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-unsupported-syntax": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "no-user-defined-lua-tuple": TSESLint.RuleModule<"lua-tuple-violation" | "tuple-macro-violation", [({
      allowTupleMacro?: boolean;
      shouldFix?: boolean;
    } | undefined)?], PluginDocumentation, TSESLint.RuleListener>;
    "no-value-typeof": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "prefer-get-players": TSESLint.RuleModule<"get-players-children-violation", [{
      validateType: boolean;
    }], PluginDocumentation, TSESLint.RuleListener>;
    "prefer-task-library": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
    "size-method": TSESLint.RuleModule<string, [], PluginDocumentation, TSESLint.RuleListener>;
  };
};
//#endregion
//#region src/configs/index.d.ts
declare const configs: {
  /**
   * ESLint core rules for Roblox-TS compatibility. These rules help prevent
   * JavaScript patterns that are incompatible with Roblox-TS.
   *
   * @example
   *
   * ```ts
   * // eslint.config.js
   * import robloxTs from "eslint-plugin-roblox-ts";
   *
   * export default [{ rules: robloxTs.configs.eslintCompat }];
   * ```
   */
  eslintCompat: _typescript_eslint_utils_ts_eslint214.FlatConfig.Config & {
    rules: {
      [x: string]: eslint215.Linter.RuleEntry<any[]>;
      readonly eqeqeq: "error";
      readonly "no-debugger": "error";
      readonly "no-labels": "error";
      readonly "no-sequences": "error";
      readonly "no-sparse-arrays": "warn";
      readonly "no-var": "error";
      readonly "no-void": "error";
      readonly "no-with": "error";
      readonly "prefer-rest-params": "error";
    };
  };
  /**
   * ESLint core rules for Roblox-TS compatibility. These rules help prevent
   * JavaScript patterns that are incompatible with Roblox-TS.
   *
   * @example
   *
   * ```ts
   * // .eslintrc.js
   * module.exports = {
   * 	extends: ["plugin:roblox-ts/eslint-compat-legacy"],
   * };
   * ```
   */
  eslintCompatLegacy: eslint215.Linter.LegacyConfig<eslint215.Linter.RulesRecord, eslint215.Linter.RulesRecord> & {
    rules: {
      [x: string]: eslint215.Linter.RuleEntry<any[]>;
      readonly eqeqeq: "error";
      readonly "no-debugger": "error";
      readonly "no-labels": "error";
      readonly "no-sequences": "error";
      readonly "no-sparse-arrays": "warn";
      readonly "no-var": "error";
      readonly "no-void": "error";
      readonly "no-with": "error";
      readonly "prefer-rest-params": "error";
    };
  };
  /**
   * Recommended configuration for ESLint v9+ (flat config). Enables all
   * plugin rules.
   *
   * @example
   *
   * ```ts
   * // eslint.config.js
   * import roblox from "eslint-plugin-roblox-ts";
   *
   * export default [roblox.configs.recommended];
   * ```
   */
  recommended: {
    plugins: {
      [x: string]: {
        meta: {
          name: string;
          version: string;
        };
        rules: {
          "lua-truthiness": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "misleading-lua-tuple-checks": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-any": _typescript_eslint_utils_ts_eslint214.RuleModule<"any-violation" | "suggest-unknown", [{
            fixToUnknown: boolean;
          }], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-array-pairs": _typescript_eslint_utils_ts_eslint214.RuleModule<"array-ipairs-violation" | "array-pairs-violation", [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-enum-merging": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-export-assignment-let": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-for-in": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-function-expression-name": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-get-set": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-implicit-self": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-invalid-identifier": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-namespace-merging": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-null": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-object-math": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-post-fix-new": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-preceding-spread-element": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-private-identifier": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-unsupported-syntax": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-user-defined-lua-tuple": _typescript_eslint_utils_ts_eslint214.RuleModule<"lua-tuple-violation" | "tuple-macro-violation", [({
            allowTupleMacro?: boolean;
            shouldFix?: boolean;
          } | undefined)?], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "no-value-typeof": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "prefer-get-players": _typescript_eslint_utils_ts_eslint214.RuleModule<"get-players-children-violation", [{
            validateType: boolean;
          }], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "prefer-task-library": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          "size-method": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
        };
      };
    };
    basePath?: string;
    files?: (string | string[])[];
    ignores?: string[];
    language?: string;
    languageOptions?: _typescript_eslint_utils_ts_eslint214.FlatConfig.LanguageOptions;
    linterOptions?: _typescript_eslint_utils_ts_eslint214.FlatConfig.LinterOptions;
    name?: string;
    processor?: string | _typescript_eslint_utils_ts_eslint214.FlatConfig.Processor;
    rules: Partial<Record<string, _typescript_eslint_utils_ts_eslint214.SharedConfig.RuleEntry>> & {
      [x: string]: eslint215.Linter.RuleEntry<any[]>;
      readonly eqeqeq: "error";
      readonly "no-debugger": "error";
      readonly "no-labels": "error";
      readonly "no-sequences": "error";
      readonly "no-sparse-arrays": "warn";
      readonly "no-var": "error";
      readonly "no-void": "error";
      readonly "no-with": "error";
      readonly "prefer-rest-params": "error";
    };
    settings?: _typescript_eslint_utils_ts_eslint214.FlatConfig.Settings;
  };
  /**
   * Recommended configuration for legacy ESLint v8. Enables all plugin rules.
   *
   * @example
   *
   * ```ts
   * // .eslintrc.js
   * module.exports = {
   * 	extends: ["plugin:roblox-ts/recommended-legacy"],
   * };
   * ```
   */
  "recommended-legacy": {
    plugins: string[];
    ignorePatterns?: string | string[] | undefined;
    root?: boolean | undefined;
    $schema?: string | undefined;
    env?: {
      [name: string]: boolean;
    } | undefined;
    extends?: string | string[] | undefined;
    globals?: eslint215.Linter.Globals | undefined;
    noInlineConfig?: boolean | undefined;
    overrides?: eslint215.Linter.ConfigOverride<eslint215.Linter.RulesRecord>[] | undefined;
    parser?: string | undefined;
    parserOptions?: eslint215.Linter.ParserOptions | undefined;
    processor?: string | undefined;
    reportUnusedDisableDirectives?: boolean | undefined;
    settings?: {
      [name: string]: any;
    } | undefined;
    rules: Partial<eslint215.Linter.RulesRecord> & {
      [x: string]: eslint215.Linter.RuleEntry<any[]>;
      readonly eqeqeq: "error";
      readonly "no-debugger": "error";
      readonly "no-labels": "error";
      readonly "no-sequences": "error";
      readonly "no-sparse-arrays": "warn";
      readonly "no-var": "error";
      readonly "no-void": "error";
      readonly "no-with": "error";
      readonly "prefer-rest-params": "error";
    };
  };
  /**
   * Configuration for legacy ESLint v8 that provides TypeScript ESLint
   * recommended compatibility overrides for Roblox-TS development patterns.
   *
   * @example
   *
   * ```ts
   * // .eslintrc.js
   * module.exports = {
   * 	extends: [
   * 		"@typescript-eslint/recommended",
   * 		"plugin:roblox-ts/tsRecommendedCompatLegacy",
   * 		"plugin:roblox-ts/recommended-legacy",
   * 	],
   * };
   * ```
   */
  "ts-recommended-compat-legacy": eslint215.Linter.LegacyConfig<eslint215.Linter.RulesRecord, eslint215.Linter.RulesRecord> & {
    rules: {
      readonly "@typescript-eslint/no-array-constructor": "off";
      readonly "@typescript-eslint/no-namespace": "off";
      readonly "@typescript-eslint/no-require-imports": "off";
      readonly "@typescript-eslint/no-unused-vars": "off";
      readonly "@typescript-eslint/triple-slash-reference": "off";
      readonly eqeqeq: "error";
      readonly "no-debugger": "error";
      readonly "no-labels": "error";
      readonly "no-sequences": "error";
      readonly "no-sparse-arrays": "warn";
      readonly "no-var": "error";
      readonly "no-void": "error";
      readonly "no-with": "error";
      readonly "prefer-rest-params": "error";
    };
  };
  /**
   * Configuration for ESLint v9+ (flat config) that provides TypeScript
   * ESLint recommended compatibility overrides for Roblox-TS development
   * patterns.
   *
   * @example
   *
   * ```ts
   * // eslint.config.js
   * import tseslint from "@typescript-eslint/eslint-plugin";
   * import robloxTs from "eslint-plugin-roblox-ts";
   *
   * export default [
   * 	...tseslint.configs.recommended,
   * 	robloxTs.configs.tsRecommendedCompat,
   * 	robloxTs.configs.recommended,
   * ];
   * ```
   */
  tsRecommendedCompat: _typescript_eslint_utils_ts_eslint214.FlatConfig.Config & {
    rules: {
      readonly "@typescript-eslint/no-array-constructor": "off";
      readonly "@typescript-eslint/no-namespace": "off";
      readonly "@typescript-eslint/no-require-imports": "off";
      readonly "@typescript-eslint/no-unused-vars": "off";
      readonly "@typescript-eslint/triple-slash-reference": "off";
      readonly eqeqeq: "error";
      readonly "no-debugger": "error";
      readonly "no-labels": "error";
      readonly "no-sequences": "error";
      readonly "no-sparse-arrays": "warn";
      readonly "no-var": "error";
      readonly "no-void": "error";
      readonly "no-with": "error";
      readonly "prefer-rest-params": "error";
    };
  };
};
//#endregion
//#region src/index.d.ts
declare const _default: {
  configs: {
    eslintCompat: _typescript_eslint_utils_ts_eslint214.FlatConfig.Config & {
      rules: {
        [x: string]: Linter.RuleEntry<any[]>;
        readonly eqeqeq: "error";
        readonly "no-debugger": "error";
        readonly "no-labels": "error";
        readonly "no-sequences": "error";
        readonly "no-sparse-arrays": "warn";
        readonly "no-var": "error";
        readonly "no-void": "error";
        readonly "no-with": "error";
        readonly "prefer-rest-params": "error";
      };
    };
    eslintCompatLegacy: Linter.LegacyConfig<Linter.RulesRecord, Linter.RulesRecord> & {
      rules: {
        [x: string]: Linter.RuleEntry<any[]>;
        readonly eqeqeq: "error";
        readonly "no-debugger": "error";
        readonly "no-labels": "error";
        readonly "no-sequences": "error";
        readonly "no-sparse-arrays": "warn";
        readonly "no-var": "error";
        readonly "no-void": "error";
        readonly "no-with": "error";
        readonly "prefer-rest-params": "error";
      };
    };
    recommended: {
      plugins: {
        [x: string]: {
          meta: {
            name: string;
            version: string;
          };
          rules: {
            "lua-truthiness": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "misleading-lua-tuple-checks": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-any": _typescript_eslint_utils_ts_eslint214.RuleModule<"any-violation" | "suggest-unknown", [{
              fixToUnknown: boolean;
            }], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-array-pairs": _typescript_eslint_utils_ts_eslint214.RuleModule<"array-ipairs-violation" | "array-pairs-violation", [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-enum-merging": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-export-assignment-let": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-for-in": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-function-expression-name": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-get-set": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-implicit-self": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-invalid-identifier": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-namespace-merging": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-null": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-object-math": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-post-fix-new": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-preceding-spread-element": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-private-identifier": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-unsupported-syntax": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-user-defined-lua-tuple": _typescript_eslint_utils_ts_eslint214.RuleModule<"lua-tuple-violation" | "tuple-macro-violation", [({
              allowTupleMacro?: boolean;
              shouldFix?: boolean;
            } | undefined)?], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "no-value-typeof": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "prefer-get-players": _typescript_eslint_utils_ts_eslint214.RuleModule<"get-players-children-violation", [{
              validateType: boolean;
            }], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "prefer-task-library": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
            "size-method": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
          };
        };
      };
      basePath?: string;
      files?: (string | string[])[];
      ignores?: string[];
      language?: string;
      languageOptions?: _typescript_eslint_utils_ts_eslint214.FlatConfig.LanguageOptions;
      linterOptions?: _typescript_eslint_utils_ts_eslint214.FlatConfig.LinterOptions;
      name?: string;
      processor?: string | _typescript_eslint_utils_ts_eslint214.FlatConfig.Processor;
      rules: Partial<Record<string, _typescript_eslint_utils_ts_eslint214.SharedConfig.RuleEntry>> & {
        [x: string]: Linter.RuleEntry<any[]>;
        readonly eqeqeq: "error";
        readonly "no-debugger": "error";
        readonly "no-labels": "error";
        readonly "no-sequences": "error";
        readonly "no-sparse-arrays": "warn";
        readonly "no-var": "error";
        readonly "no-void": "error";
        readonly "no-with": "error";
        readonly "prefer-rest-params": "error";
      };
      settings?: _typescript_eslint_utils_ts_eslint214.FlatConfig.Settings;
    };
    "recommended-legacy": {
      plugins: string[];
      ignorePatterns?: string | string[] | undefined;
      root?: boolean | undefined;
      $schema?: string | undefined;
      env?: {
        [name: string]: boolean;
      } | undefined;
      extends?: string | string[] | undefined;
      globals?: Linter.Globals | undefined;
      noInlineConfig?: boolean | undefined;
      overrides?: Linter.ConfigOverride<Linter.RulesRecord>[] | undefined;
      parser?: string | undefined;
      parserOptions?: Linter.ParserOptions | undefined;
      processor?: string | undefined;
      reportUnusedDisableDirectives?: boolean | undefined;
      settings?: {
        [name: string]: any;
      } | undefined;
      rules: Partial<Linter.RulesRecord> & {
        [x: string]: Linter.RuleEntry<any[]>;
        readonly eqeqeq: "error";
        readonly "no-debugger": "error";
        readonly "no-labels": "error";
        readonly "no-sequences": "error";
        readonly "no-sparse-arrays": "warn";
        readonly "no-var": "error";
        readonly "no-void": "error";
        readonly "no-with": "error";
        readonly "prefer-rest-params": "error";
      };
    };
    "ts-recommended-compat-legacy": Linter.LegacyConfig<Linter.RulesRecord, Linter.RulesRecord> & {
      rules: {
        readonly "@typescript-eslint/no-array-constructor": "off";
        readonly "@typescript-eslint/no-namespace": "off";
        readonly "@typescript-eslint/no-require-imports": "off";
        readonly "@typescript-eslint/no-unused-vars": "off";
        readonly "@typescript-eslint/triple-slash-reference": "off";
        readonly eqeqeq: "error";
        readonly "no-debugger": "error";
        readonly "no-labels": "error";
        readonly "no-sequences": "error";
        readonly "no-sparse-arrays": "warn";
        readonly "no-var": "error";
        readonly "no-void": "error";
        readonly "no-with": "error";
        readonly "prefer-rest-params": "error";
      };
    };
    tsRecommendedCompat: _typescript_eslint_utils_ts_eslint214.FlatConfig.Config & {
      rules: {
        readonly "@typescript-eslint/no-array-constructor": "off";
        readonly "@typescript-eslint/no-namespace": "off";
        readonly "@typescript-eslint/no-require-imports": "off";
        readonly "@typescript-eslint/no-unused-vars": "off";
        readonly "@typescript-eslint/triple-slash-reference": "off";
        readonly eqeqeq: "error";
        readonly "no-debugger": "error";
        readonly "no-labels": "error";
        readonly "no-sequences": "error";
        readonly "no-sparse-arrays": "warn";
        readonly "no-var": "error";
        readonly "no-void": "error";
        readonly "no-with": "error";
        readonly "prefer-rest-params": "error";
      };
    };
  };
  meta: {
    name: string;
    version: string;
  };
  rules: {
    "lua-truthiness": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "misleading-lua-tuple-checks": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-any": _typescript_eslint_utils_ts_eslint214.RuleModule<"any-violation" | "suggest-unknown", [{
      fixToUnknown: boolean;
    }], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-array-pairs": _typescript_eslint_utils_ts_eslint214.RuleModule<"array-ipairs-violation" | "array-pairs-violation", [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-enum-merging": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-export-assignment-let": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-for-in": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-function-expression-name": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-get-set": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-implicit-self": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-invalid-identifier": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-namespace-merging": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-null": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-object-math": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-post-fix-new": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-preceding-spread-element": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-private-identifier": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-unsupported-syntax": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-user-defined-lua-tuple": _typescript_eslint_utils_ts_eslint214.RuleModule<"lua-tuple-violation" | "tuple-macro-violation", [({
      allowTupleMacro?: boolean;
      shouldFix?: boolean;
    } | undefined)?], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "no-value-typeof": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "prefer-get-players": _typescript_eslint_utils_ts_eslint214.RuleModule<"get-players-children-violation", [{
      validateType: boolean;
    }], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "prefer-task-library": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
    "size-method": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  };
};
declare const rules: {
  "lua-truthiness": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "misleading-lua-tuple-checks": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-any": _typescript_eslint_utils_ts_eslint214.RuleModule<"any-violation" | "suggest-unknown", [{
    fixToUnknown: boolean;
  }], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-array-pairs": _typescript_eslint_utils_ts_eslint214.RuleModule<"array-ipairs-violation" | "array-pairs-violation", [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-enum-merging": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-export-assignment-let": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-for-in": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-function-expression-name": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-get-set": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-implicit-self": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-invalid-identifier": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-namespace-merging": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-null": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-object-math": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-post-fix-new": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-preceding-spread-element": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-private-identifier": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-unsupported-syntax": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-user-defined-lua-tuple": _typescript_eslint_utils_ts_eslint214.RuleModule<"lua-tuple-violation" | "tuple-macro-violation", [({
    allowTupleMacro?: boolean;
    shouldFix?: boolean;
  } | undefined)?], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "no-value-typeof": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "prefer-get-players": _typescript_eslint_utils_ts_eslint214.RuleModule<"get-players-children-violation", [{
    validateType: boolean;
  }], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "prefer-task-library": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
  "size-method": _typescript_eslint_utils_ts_eslint214.RuleModule<string, [], PluginDocumentation, _typescript_eslint_utils_ts_eslint214.RuleListener>;
};
type RuleOptions = { [K in keyof RuleDefinitions]: RuleDefinitions[K]["defaultOptions"] };
type Rules = { [K in keyof RuleOptions]: Linter.RuleEntry<RuleOptions[K]> };
type RuleDefinitions = typeof plugin.rules;
//#endregion
export { RuleOptions, Rules, configs, _default as default, rules };